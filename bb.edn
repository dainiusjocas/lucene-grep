{:paths          ["."]
 :deps           {}
 :min-bb-version "0.4.0"
 :tasks          {:requires ([clojure.string :as str])
                  -pom.xml
                  {:doc  "Creates pom.xml"
                   :task (clojure "-Spom")}
                  deps-prep
                  {:doc  "Build the required deps"
                   :task (clojure "-T:build prep-deps")}
                  -LMGREP_VERSION
                  {:doc "Update LMGREP_VERSION file"
                   :task (let [version (->> (shell {:out :string} "git describe --tags --abbrev=0")
                                         (:out)
                                         (str/trim))]
                           (spit "resources/LMGREP_VERSION" (str version "-SNAPSHOT")))}
                  uberjar
                  {:doc  "Build an uberjar"
                   :depends [deps-prep -pom.xml -LMGREP_VERSION]
                   :task (clojure "-T:build uberjar")}
                  run
                  {:requires ([script.env-profiles :as e])
                   :doc      "Run lmgrep on JVM with required profiles"
                   :task     (let [profiles (e/profiles)]
                               (println "Running lmgrep on JVM with profiles: " profiles)
                               (apply clojure (cond-> [(str "-M:" (clojure.string/join ":" profiles) " -m lmgrep.core")]
                                                (not (empty? *command-line-args*)) (concat *command-line-args*))))}
                  test
                  {:requires ([script.env-profiles :as e])
                   :doc      "Run tests with the required profiles"
                   :task     (let [profiles (e/profiles)]
                               (println "Running lmgrep tests with profiles: " profiles)
                               (clojure (str "-M:"
                                          (clojure.string/join ":" profiles)
                                          ":test")))}
                  lint
                  {:doc  "Either clj-kondo CLI or the JVM version"
                   :task (try
                           (shell "clj-kondo" "--lint" "src" "test")
                           (catch Exception _
                             (clojure "-M:clj-kondo")))}
                  outdated
                  {:doc  "Checks for outdated dependencies."
                   :task (clojure "-Sdeps '{:deps {com.github.liquidz/antq {:mvn/version \"RELEASE\"}}}' -M -m antq.core")}
                  generate-reflection-config
                  {:requires ([script.reflection :as r]
                              [script.env-profiles :as e])
                   :doc      "Generate config files for GraalVM native-image"
                   :task     (let [profiles (e/profiles)]
                               (println "Running the tests with a native image agent with profiles: " profiles)
                               (clojure {:extra-env {"LMGREP_WRITE_TEST_DATA" "true"}}
                                 (str "-J-agentlib:native-image-agent=config-output-dir=graalvm -M:"
                                   (clojure.string/join ":" profiles)
                                   ":test"))
                               (println "Filtering Lucene classes with all their constructors:")
                               (r/gen))}}}

