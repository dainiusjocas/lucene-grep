{:paths          ["."]
 :deps           {}
 :min-bb-version "0.4.0"
 :tasks          {run
                  {:requires ([script.env-profiles :as e])
                   :doc      "Run lmgrep on JVM with required profiles"
                   :task     (let [profiles (e/profiles)]
                               (println "Running lmgrep on JVM with profiles: " profiles)
                               (apply clojure (cond-> [(str "-M:" (clojure.string/join ":" profiles) " -m lmgrep.core")]
                                                (not (empty? *command-line-args*)) (concat *command-line-args*))))}
                  test
                  {:requires ([script.env-profiles :as e])
                   :doc      "Run tests with the required profiles"
                   :task     (let [profiles (e/profiles)]
                               (println "Running lmgrep tests with profiles: " profiles)
                               (clojure (str "-M:"
                                          (clojure.string/join ":" profiles)
                                          ":test")))}
                  generate-reflection-config
                  {:requires ([script.reflection :as r]
                              [script.env-profiles :as e])
                   :doc      "Generate config files for GraalVM native-image"
                   :task     (let [profiles (e/profiles)]
                               (println "Running the tests with a native image agent with profiles: " profiles)
                               (clojure {:extra-env {"LMGREP_WRITE_TEST_DATA" "true"}}
                                 (str "-J-agentlib:native-image-agent=config-output-dir=graalvm -M:"
                                   (clojure.string/join ":" profiles)
                                   ":test"))
                               (println "Filtering Lucene classes with all their constructors:")
                               (r/gen))}

                  print-query-parsers-attributes-compatibility-table
                  {:requires ([script.reflection :as r])
                   :doc      "Print query parsers attributes compatibility table"
                   :task     (clojure "-M -i script/query-parser-attributes-table.clj")}
                  }}
